{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"search\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_a_input_search = _resolveComponent(\"a-input-search\");\n  const _component_a_button = _resolveComponent(\"a-button\");\n  const _component_a_popconfirm = _resolveComponent(\"a-popconfirm\");\n  const _component_a_table = _resolveComponent(\"a-table\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_a_input_search, {\n    class: \"searchText\",\n    value: $setup.searchKeyword,\n    \"onUpdate:value\": _cache[0] || (_cache[0] = $event => $setup.searchKeyword = $event),\n    placeholder: \"请输入产品名称\",\n    \"enter-button\": \"查询\",\n    size: \"default\",\n    onSearch: $setup.onSearch\n  }, null, 8 /* PROPS */, [\"value\", \"onSearch\"]), _createVNode(_component_a_button, {\n    type: \"primary\",\n    class: \"add-a\",\n    onClick: $setup.showDrawer\n  }, {\n    default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\"添加\")])),\n    _: 1 /* STABLE */\n  })]), _createVNode(_component_a_table, {\n    dataSource: $setup.tableDatas,\n    columns: $setup.tableColumns\n  }, {\n    bodyCell: _withCtx(({\n      column,\n      text,\n      record\n    }) => [column.dataIndex === 'operation' ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 0\n    }, [_createElementVNode(\"a\", {\n      onClick: _cache[1] || (_cache[1] = (...args) => $setup.onEdit && $setup.onEdit(...args))\n    }, \"编辑\"), _createVNode(_component_a_popconfirm, {\n      title: \"确定删除吗?\",\n      okText: \"确定\",\n      cancelText: \"取消\",\n      onConfirm: $event => $setup.onDelete(record.id)\n    }, {\n      default: _withCtx(() => _cache[3] || (_cache[3] = [_createElementVNode(\"a\", null, \"删除\", -1 /* HOISTED */)])),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onConfirm\"])], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"dataSource\", \"columns\"]), _createVNode($setup[\"addPro\"], {\n    showDrawer: $setup.showDrawer\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_createVNode","_component_a_input_search","value","$setup","searchKeyword","_cache","$event","placeholder","size","onSearch","_component_a_button","type","onClick","showDrawer","default","_withCtx","_createTextVNode","_","_component_a_table","dataSource","tableDatas","columns","tableColumns","bodyCell","column","text","record","dataIndex","key","args","onEdit","_component_a_popconfirm","title","okText","cancelText","onConfirm","onDelete","id","_createCommentVNode"],"sources":["E:\\permisson\\demo\\src\\views\\products\\productsinfo.vue"],"sourcesContent":["<template>\r\n  <div class=\"search\">\r\n    <a-input-search class=\"searchText\" v-model:value=\"searchKeyword\" placeholder=\"请输入产品名称\" enter-button=\"查询\"\r\n      size=\"default\" @search=\"onSearch\" />\r\n    <a-button type=\"primary\" class=\"add-a\" @click=\"showDrawer\">添加</a-button>\r\n  </div>\r\n  <a-table :dataSource=\"tableDatas\" :columns=\"tableColumns\">\r\n    <template #bodyCell=\"{ column, text, record }\">\r\n      <template v-if=\"column.dataIndex === 'operation'\">\r\n        <a @click=\"onEdit\">编辑</a>\r\n        <a-popconfirm title=\"确定删除吗?\" okText=\"确定\" cancelText=\"取消\" @confirm=\"onDelete(record.id)\">\r\n          <a>删除</a>\r\n        </a-popconfirm>\r\n      </template>\r\n    </template>\r\n  </a-table>\r\n<addPro :showDrawer=\"showDrawer\"></addPro>\r\n</template>\r\n\r\n<script setup>\r\n// import addProduct from '../../components/product/addProduct.vue'\r\nimport { reactive, toRefs, ref } from 'vue';\r\nimport { createDirectus, rest, readItems } from '@directus/sdk';\r\nimport { message } from 'ant-design-vue';\r\nimport { $categorieslist, $addProduct,$delProduct } from '../../api/proinfo.js'\r\nimport addPro from \"../../components/product/addProduct.vue\"\r\nconst searchKeyword = ref('');\r\nconst open = ref(false);\r\nconst formRef = ref();\r\nconst afterOpenChange = bool => {\r\n  formRef.value.resetFields();\r\n};\r\nconst showDrawer = () => {\r\n  open.value = true;\r\n};\r\n// 数据源\r\nlet dataSource = reactive({\r\n  tableDatas: [],  // 确保 dataSource.tableDatas 一开始是空数组\r\n  tableColumns: [\r\n    {\r\n      title: '产品id',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n    },\r\n    {\r\n      title: '产品名称',\r\n      dataIndex: 'name'\r\n    },\r\n    {\r\n      title: '价格',\r\n      dataIndex: 'price'\r\n    },\r\n    {\r\n      title: '类别',\r\n      dataIndex: 'categories.name'\r\n    },\r\n    {\r\n      title: '操作',\r\n      dataIndex: 'operation'\r\n    }\r\n  ],\r\n  formState: {\r\n    name: '',\r\n    price: '',\r\n    categories: {\r\n      create: [\r\n        { categories_id: '' }, // 关联类别的 ID // 如果有多个类别\r\n      ]\r\n    }\r\n  },\r\n  categoriesList: [],\r\n  showDrawer:false\r\n});\r\n// 使用 `toRefs` 解构 `reactive` 数据，方便在模板中直接使用\r\nlet { tableDatas, tableColumns, formState, categoriesList } = toRefs(dataSource);\r\nlet onFinish = () => {\r\n  const newProduct = {\r\n    name: dataSource.formState.name,\r\n    price: dataSource.formState.price,\r\n    categories: {\r\n      create: [\r\n        { categories_id: dataSource.formState.categories }, // 关联类别的 ID // 如果有多个类别\r\n      ]\r\n    }\r\n  };\r\n  console.log(newProduct);\r\n  $addProduct(newProduct)\r\n    .then(response => {\r\n      console.log(\"Product added successfully:\", response);\r\n      loadData()\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Failed to add product:\", error);\r\n    });\r\n  // const selectedCategoryName = formState.categories;\r\n  // const selectedCategory = dataSource.categoriesList.find(\r\n  //   (category) => category.name === selectedCategoryName\r\n  // );\r\n\r\n  // if (selectedCategory) {\r\n  //   // 将类别的 id 赋值给 formState.categories\r\n  //   formState.categories = selectedCategory.id;\r\n  // }\r\n  // const payload = {\r\n  //   name: dataSource.formState.name,\r\n  //   price: dataSource.formState.price,\r\n  //   categories: {\r\n  //     create: [{ id: dataSource.formState.categories }] // 将选中的 category id 转换为对象\r\n  //   }\r\n  // };\r\n\r\n  // console.log(dataSource.formState);\r\n  // $addProduct(dataSource.formState);\r\n  // $addProduct({\r\n  //   name: 666,\r\n  //   price: 12312312,\r\n  //   categories:  [ { id:'2'} ]   // 直接传递完整的 categories 对象\r\n  // });\r\n}\r\nlet id=ref(\"\")\r\nlet onEdit=(val)=>{\r\n  dataSource.showDrawer=true\r\n}\r\nlet onClear = () => {\r\n  formRef.value.resetFields();\r\n  id=val\r\n}\r\nlet onDelete = async (id) => {\r\n  try {\r\n    const success = await $delProduct(id); // 等待删除完成\r\n\r\n    if (success) {\r\n      message.success(\"产品删除成功\");\r\n      loadData(); // 重新加载数据\r\n    } else {\r\n      message.error(\"产品删除失败\");\r\n    }\r\n  } catch (error) {\r\n    message.error(\"删除产品时发生错误：\" + error.message);\r\n  }\r\n};\r\n\r\nconst client = createDirectus('http://localhost:8055').with(rest());\r\nlet loadCate = () => {\r\n  $categorieslist().then(r => {\r\n    dataSource.categoriesList = r.map(item => ({ id: item.id, name: item.name }));\r\n    // console.log(r);\r\n\r\n  })\r\n}\r\nlet loadData = async (searchKeyword = '') => {\r\n  try {\r\n    const filter = searchKeyword\r\n      ? {\r\n        filter: {\r\n          name: {\r\n            _contains: searchKeyword, // 直接查询包含关键字的产品\r\n          },\r\n        },\r\n      }\r\n      : {};\r\n\r\n    const result = await client.request(readItems('products', {\r\n      fields: [\r\n        '*'\r\n      ],\r\n      ...filter\r\n    }));\r\n    // let cate=result.categories.id\r\n    // 将返回的数据赋值给 tableDatas\r\n    tableDatas.value = result\r\n    console.log(tableDatas);\r\n\r\n  } catch (error) {\r\n    console.error('Failed to fetch items:', error);\r\n  }\r\n};\r\nloadData()\r\nloadCate()\r\nlet onSearch = (value) => {\r\n  searchKeyword.value = value;\r\n  loadData(value);  // 传递搜索内容\r\n}\r\n</script>\r\n<style scoped lang=\"scss\">\r\n.search {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n\r\n  .searchText {\r\n    width: 300px;\r\n  }\r\n\r\n  .add-a {\r\n    background: red;\r\n    border: none;\r\n  }\r\n\r\n  .add {\r\n    background: #bacf65;\r\n    border: none;\r\n    color: white\r\n  }\r\n\r\n  .clear {\r\n    margin-left: 10px;\r\n  }\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAQ;;;;;;uBADrBC,mBAAA,CAAAC,SAAA,SACEC,mBAAA,CAIM,OAJNC,UAIM,GAHJC,YAAA,CACsCC,yBAAA;IADtBN,KAAK,EAAC,YAAY;IAASO,KAAK,EAAEC,MAAA,CAAAC,aAAa;IAFnE,kBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAEsDH,MAAA,CAAAC,aAAa,GAAAE,MAAA;IAAEC,WAAW,EAAC,SAAS;IAAC,cAAY,EAAC,IAAI;IACtGC,IAAI,EAAC,SAAS;IAAEC,QAAM,EAAEN,MAAA,CAAAM;kDAC1BT,YAAA,CAAwEU,mBAAA;IAA9DC,IAAI,EAAC,SAAS;IAAChB,KAAK,EAAC,OAAO;IAAEiB,OAAK,EAAET,MAAA,CAAAU;;IAJnDC,OAAA,EAAAC,QAAA,CAI+D,MAAEV,MAAA,QAAAA,MAAA,OAJjEW,gBAAA,CAI+D,IAAE,E;IAJjEC,CAAA;QAMEjB,YAAA,CASUkB,kBAAA;IATAC,UAAU,EAAEhB,MAAA,CAAAiB,UAAU;IAAGC,OAAO,EAAElB,MAAA,CAAAmB;;IAC/BC,QAAQ,EAAAR,QAAA,CACjB,CAKW;MANUS,MAAM;MAAEC,IAAI;MAAEC;IAAM,OACzBF,MAAM,CAACG,SAAS,oB,cAAhC/B,mBAAA,CAKWC,SAAA;MAbjB+B,GAAA;IAAA,IASQ9B,mBAAA,CAAyB;MAArBc,OAAK,EAAAP,MAAA,QAAAA,MAAA,UAAAwB,IAAA,KAAE1B,MAAA,CAAA2B,MAAA,IAAA3B,MAAA,CAAA2B,MAAA,IAAAD,IAAA,CAAM;OAAE,IAAE,GACrB7B,YAAA,CAEe+B,uBAAA;MAFDC,KAAK,EAAC,QAAQ;MAACC,MAAM,EAAC,IAAI;MAACC,UAAU,EAAC,IAAI;MAAEC,SAAO,EAAA7B,MAAA,IAAEH,MAAA,CAAAiC,QAAQ,CAACV,MAAM,CAACW,EAAE;;MAV7FvB,OAAA,EAAAC,QAAA,CAWU,MAASV,MAAA,QAAAA,MAAA,OAATP,mBAAA,CAAS,WAAN,IAAE,oB;MAXfmB,CAAA;sFAAAqB,mBAAA,e;IAAArB,CAAA;gDAgBAjB,YAAA,CAA0CG,MAAA;IAAjCU,UAAU,EAAEV,MAAA,CAAAU;EAAU,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}