{"ast":null,"code":"import \"core-js/modules/es.array.with.js\";\nimport { ref } from 'vue';\nimport { message } from 'ant-design-vue';\nimport { InboxOutlined } from '@ant-design/icons-vue';\nimport { createDirectus, rest, uploadFiles, readFiles } from '@directus/sdk';\nimport { $getfile } from '@/api/file';\nexport default {\n  __name: 'ocr',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const imageUrl = ref('');\n    const id = ref('');\n    // 1️⃣ 创建 Directus 客户端\n    const client = createDirectus('http://localhost:8055').with(rest());\n    const open = ref(false);\n    const showDrawer = () => {\n      open.value = true;\n    };\n    const onClose = () => {\n      open.value = false;\n    };\n    // 2️⃣ 初始化文件列表和上传状态\n    const fileList = ref([]);\n    let uploadStatus = ref('');\n\n    // 3️⃣ 文件上传成功/失败时的处理\n    const handleChange = info => {\n      const status = info.file.status;\n      if (status !== 'uploading') {\n        console.log(info.file, info.fileList);\n      }\n      if (status === 'done') {\n        message.success(`${info.file.name} 成功上传.`);\n      } else if (status === 'error') {\n        message.error(`${info.file.name} 上传失败.`);\n      }\n    };\n    let imglist = [];\n    // 4️⃣ 处理文件拖拽事件\n    function handleDrop(e) {\n      // 获取拖拽的文件\n      const files = e.dataTransfer.files;\n      if (files.length > 0) {\n        // 使用 FormData 来构建上传的文件数据\n        const formData = new FormData();\n        for (let file of files) {\n          formData.append('file', file);\n        }\n        // console.log(formData);\n\n        // 确保 imageUrl 是 Vue 响应式的 ref 类型\n        // let imginfo=async()=>{\n        //   const result = await client.request(readFiles('*'));\n        //   imglist=result\n        //   console.log(result);\n        // }\n        // imginfo()\n        // 上传文件处理逻辑\n        client.request(uploadFiles(formData)).then(response => {\n          console.log('Response:', response); // 检查 response 数据结构\n          const imageUrlPath = `http://localhost:8055/assets/${response.id}`;\n          const imid = response.id;\n          // 使用 .value 来赋值，因为 imageUrl 是一个 ref 类型\n          imageUrl.value = imageUrlPath;\n          id.value = imid;\n        }).catch(error => {\n          // 上传失败处理\n          uploadStatus.value = 'Upload failed!';\n          message.error('File upload failed!');\n          console.error(error);\n        });\n      }\n    }\n    const __returned__ = {\n      imageUrl,\n      id,\n      client,\n      open,\n      showDrawer,\n      onClose,\n      fileList,\n      get uploadStatus() {\n        return uploadStatus;\n      },\n      set uploadStatus(v) {\n        uploadStatus = v;\n      },\n      handleChange,\n      get imglist() {\n        return imglist;\n      },\n      set imglist(v) {\n        imglist = v;\n      },\n      handleDrop,\n      ref,\n      get message() {\n        return message;\n      },\n      get InboxOutlined() {\n        return InboxOutlined;\n      },\n      get createDirectus() {\n        return createDirectus;\n      },\n      get rest() {\n        return rest;\n      },\n      get uploadFiles() {\n        return uploadFiles;\n      },\n      get readFiles() {\n        return readFiles;\n      },\n      get $getfile() {\n        return $getfile;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","message","InboxOutlined","createDirectus","rest","uploadFiles","readFiles","$getfile","imageUrl","id","client","with","open","showDrawer","value","onClose","fileList","uploadStatus","handleChange","info","status","file","console","log","success","name","error","imglist","handleDrop","e","files","dataTransfer","length","formData","FormData","append","request","then","response","imageUrlPath","imid","catch"],"sources":["E:/permisson/demo/src/views/ocr/ocr.vue"],"sourcesContent":["<template>\r\n  <div >\r\n    <a-upload-dragger\r\n      v-model:fileList=\"fileList\"\r\n      name=\"file\"\r\n      action='/files'\r\n      :multiple=\"true\"\r\n      @change=\"handleChange\"\r\n      @drop=\"handleDrop\"\r\n      :style=\"{ width: '600px', height: '100vh' }\"\r\n    >\r\n      <p class=\"ant-upload-drag-icon\">\r\n        <InboxOutlined></InboxOutlined>\r\n      </p>\r\n      <p class=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n      <p class=\"ant-upload-hint\">\r\n        Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n        band files\r\n      </p>\r\n    </a-upload-dragger>\r\n    <!-- 上传成功后的图片显示区域 -->\r\n    <div v-if=\"imageUrl\" class=\"image-container\">\r\n      <img :src=\"imageUrl\" alt=\"Uploaded Image\" class=\"uploaded-image\" @onclick=\"showDrawer\"/>\r\n    </div>\r\n    <a-drawer\r\n    title=\"提取结果\"\r\n    :placement=\"top\"\r\n    :closable=\"false\"\r\n    :open=\"open\"\r\n    @close=\"onClose\"\r\n  >\r\n    <p>Some contents...</p>\r\n    <p>Some contents...</p>\r\n    <p>Some contents...</p>\r\n  </a-drawer>\r\n    <p id=\"status\">{{ uploadStatus }}</p>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport { InboxOutlined } from '@ant-design/icons-vue';\r\nimport { createDirectus, rest, uploadFiles,readFiles } from '@directus/sdk';\r\nimport { $getfile } from '@/api/file';\r\nconst imageUrl = ref(''); \r\nconst id = ref('');\r\n// 1️⃣ 创建 Directus 客户端\r\nconst client = createDirectus('http://localhost:8055').with(rest());\r\nconst open = ref(false);\r\nconst showDrawer = () => {\r\n  open.value = true;\r\n};\r\nconst onClose = () => {\r\n  open.value = false;\r\n};\r\n// 2️⃣ 初始化文件列表和上传状态\r\nconst fileList = ref([]);\r\nlet uploadStatus = ref('');\r\n\r\n// 3️⃣ 文件上传成功/失败时的处理\r\nconst handleChange = (info) => {\r\n  const status = info.file.status;\r\n  if (status !== 'uploading') {\r\n    console.log(info.file, info.fileList);\r\n  }\r\n  if (status === 'done') {\r\n    message.success(`${info.file.name} 成功上传.`);\r\n  } else if (status === 'error') {\r\n    message.error(`${info.file.name} 上传失败.`);\r\n  }\r\n};\r\nlet imglist=[]\r\n// 4️⃣ 处理文件拖拽事件\r\nfunction handleDrop(e) {\r\n  // 获取拖拽的文件\r\n  const files = e.dataTransfer.files;\r\n  if (files.length > 0) {\r\n    // 使用 FormData 来构建上传的文件数据\r\n    const formData = new FormData();\r\n    for (let file of files) {\r\n      formData.append('file', file);\r\n    }\r\n    // console.log(formData);\r\n\r\n    // 确保 imageUrl 是 Vue 响应式的 ref 类型\r\n// let imginfo=async()=>{\r\n//   const result = await client.request(readFiles('*'));\r\n//   imglist=result\r\n//   console.log(result);\r\n// }\r\n// imginfo()\r\n// 上传文件处理逻辑\r\n client.request(uploadFiles(formData))\r\n  .then((response) => {\r\n    console.log('Response:', response);  // 检查 response 数据结构\r\n        const imageUrlPath = `http://localhost:8055/assets/${response.id}`;\r\n        const imid=response.id\r\n        // 使用 .value 来赋值，因为 imageUrl 是一个 ref 类型\r\n        imageUrl.value = imageUrlPath;\r\n        id.value=imid\r\n  })\r\n  .catch((error) => {\r\n    // 上传失败处理\r\n    uploadStatus.value = 'Upload failed!';\r\n    message.error('File upload failed!');\r\n    console.error(error);\r\n  });\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.uip {\r\n  height: 200px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.image-container {\r\n  margin-top: 20px;\r\n}\r\n\r\n.uploaded-image {\r\n  width: 200px;\r\n  max-height: 200px;\r\n  border-radius: 10px;\r\n  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n</style>\r\n"],"mappings":";AAyCA,SAASA,GAAG,QAAQ,KAAK;AACzB,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,cAAc,EAAEC,IAAI,EAAEC,WAAW,EAACC,SAAS,QAAQ,eAAe;AAC3E,SAASC,QAAQ,QAAQ,YAAY;;;;;;;IACrC,MAAMC,QAAQ,GAAGR,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMS,EAAE,GAAGT,GAAG,CAAC,EAAE,CAAC;IAClB;IACA,MAAMU,MAAM,GAAGP,cAAc,CAAC,uBAAuB,CAAC,CAACQ,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;IACnE,MAAMQ,IAAI,GAAGZ,GAAG,CAAC,KAAK,CAAC;IACvB,MAAMa,UAAU,GAAGA,CAAA,KAAM;MACvBD,IAAI,CAACE,KAAK,GAAG,IAAI;IACnB,CAAC;IACD,MAAMC,OAAO,GAAGA,CAAA,KAAM;MACpBH,IAAI,CAACE,KAAK,GAAG,KAAK;IACpB,CAAC;IACD;IACA,MAAME,QAAQ,GAAGhB,GAAG,CAAC,EAAE,CAAC;IACxB,IAAIiB,YAAY,GAAGjB,GAAG,CAAC,EAAE,CAAC;;IAE1B;IACA,MAAMkB,YAAY,GAAIC,IAAI,IAAK;MAC7B,MAAMC,MAAM,GAAGD,IAAI,CAACE,IAAI,CAACD,MAAM;MAC/B,IAAIA,MAAM,KAAK,WAAW,EAAE;QAC1BE,OAAO,CAACC,GAAG,CAACJ,IAAI,CAACE,IAAI,EAAEF,IAAI,CAACH,QAAQ,CAAC;MACvC;MACA,IAAII,MAAM,KAAK,MAAM,EAAE;QACrBnB,OAAO,CAACuB,OAAO,CAAC,GAAGL,IAAI,CAACE,IAAI,CAACI,IAAI,QAAQ,CAAC;MAC5C,CAAC,MAAM,IAAIL,MAAM,KAAK,OAAO,EAAE;QAC7BnB,OAAO,CAACyB,KAAK,CAAC,GAAGP,IAAI,CAACE,IAAI,CAACI,IAAI,QAAQ,CAAC;MAC1C;IACF,CAAC;IACD,IAAIE,OAAO,GAAC,EAAE;IACd;IACA,SAASC,UAAUA,CAACC,CAAC,EAAE;MACrB;MACA,MAAMC,KAAK,GAAGD,CAAC,CAACE,YAAY,CAACD,KAAK;MAClC,IAAIA,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;QACpB;QACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;QAC/B,KAAK,IAAIb,IAAI,IAAIS,KAAK,EAAE;UACtBG,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEd,IAAI,CAAC;QAC/B;QACA;;QAEA;QACJ;QACA;QACA;QACA;QACA;QACA;QACA;QACCX,MAAM,CAAC0B,OAAO,CAAC/B,WAAW,CAAC4B,QAAQ,CAAC,CAAC,CACnCI,IAAI,CAAEC,QAAQ,IAAK;UAClBhB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEe,QAAQ,CAAC,CAAC,CAAE;UACjC,MAAMC,YAAY,GAAG,gCAAgCD,QAAQ,CAAC7B,EAAE,EAAE;UAClE,MAAM+B,IAAI,GAACF,QAAQ,CAAC7B,EAAE;UACtB;UACAD,QAAQ,CAACM,KAAK,GAAGyB,YAAY;UAC7B9B,EAAE,CAACK,KAAK,GAAC0B,IAAI;QACnB,CAAC,CAAC,CACDC,KAAK,CAAEf,KAAK,IAAK;UAChB;UACAT,YAAY,CAACH,KAAK,GAAG,gBAAgB;UACrCb,OAAO,CAACyB,KAAK,CAAC,qBAAqB,CAAC;UACpCJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC;QACtB,CAAC,CAAC;MAEF;IACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}