{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { reactive, ref, toRefs, inject, watch } from 'vue';\nimport { message } from 'ant-design-vue';\nimport { $categorieslist, $addProduct, $getProduct } from '../../api/proinfo.js';\nexport default {\n  __name: 'addProduct',\n  props: [\"showDrawer\", \"no\"],\n  emits: ['sync-drawer'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const formRef = ref();\n    let loadData = inject('loadData');\n    let id = inject('id');\n    let dataSource = reactive({\n      formState: {\n        name: '',\n        price: '',\n        categories: '' // 用于存储选中的类别ID\n      },\n      categoriesList: [] // 用于存储类别列表\n    });\n    let {\n      formState,\n      categoriesList\n    } = toRefs(dataSource);\n    let emit = __emit;\n    watch(() => id.value, nval => {\n      $getProduct(nval).then(r => {\n        // 更新formState的值\n        dataSource.formState = r;\n        console.log(dataSource.formState.name); // 检查是否正确更新\n      });\n    });\n    let afterOpenChange = val => {\n      if (!val) {\n        emit('sync-drawer', val);\n      }\n    };\n    const closeDrawer = () => {\n      emit('sync-drawer', false);\n    };\n    let onFinish = () => {\n      const newProduct = {\n        name: dataSource.formState.name,\n        price: dataSource.formState.price,\n        categories: {\n          create: [{\n            categories_id: dataSource.formState.categories\n          } // 关联类别的 ID\n          ]\n        }\n      };\n      $addProduct(newProduct).then(response => {\n        message.success(\"产品添加成功1\");\n        formRef.value.resetFields();\n        console.log(response);\n        loadData();\n      }).catch(error => {\n        message.error(\"产品添加失败1\");\n      });\n    };\n    let loadCate = () => {\n      $categorieslist().then(r => {\n        dataSource.categoriesList = r.map(item => ({\n          id: item.id,\n          name: item.name\n        }));\n        console.log(dataSource.categoriesList); // 检查类别列表\n      });\n    };\n    let onClear = () => {\n      formRef.value.resetFields();\n    };\n    loadCate();\n    const __returned__ = {\n      formRef,\n      get loadData() {\n        return loadData;\n      },\n      set loadData(v) {\n        loadData = v;\n      },\n      get id() {\n        return id;\n      },\n      set id(v) {\n        id = v;\n      },\n      get dataSource() {\n        return dataSource;\n      },\n      set dataSource(v) {\n        dataSource = v;\n      },\n      get formState() {\n        return formState;\n      },\n      set formState(v) {\n        formState = v;\n      },\n      get categoriesList() {\n        return categoriesList;\n      },\n      set categoriesList(v) {\n        categoriesList = v;\n      },\n      get emit() {\n        return emit;\n      },\n      set emit(v) {\n        emit = v;\n      },\n      get afterOpenChange() {\n        return afterOpenChange;\n      },\n      set afterOpenChange(v) {\n        afterOpenChange = v;\n      },\n      closeDrawer,\n      get onFinish() {\n        return onFinish;\n      },\n      set onFinish(v) {\n        onFinish = v;\n      },\n      get loadCate() {\n        return loadCate;\n      },\n      set loadCate(v) {\n        loadCate = v;\n      },\n      get onClear() {\n        return onClear;\n      },\n      set onClear(v) {\n        onClear = v;\n      },\n      reactive,\n      ref,\n      toRefs,\n      inject,\n      watch,\n      get message() {\n        return message;\n      },\n      get $categorieslist() {\n        return $categorieslist;\n      },\n      get $addProduct() {\n        return $addProduct;\n      },\n      get $getProduct() {\n        return $getProduct;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["reactive","ref","toRefs","inject","watch","message","$categorieslist","$addProduct","$getProduct","formRef","loadData","id","dataSource","formState","name","price","categories","categoriesList","emit","__emit","value","nval","then","r","console","log","afterOpenChange","val","closeDrawer","onFinish","newProduct","create","categories_id","response","success","resetFields","catch","error","loadCate","map","item","onClear"],"sources":["E:/permisson/demo/src/components/product/addProduct.vue"],"sourcesContent":["<template>\r\n  <a-drawer :open=\"showDrawer\" class=\"custom-class\" root-class-name=\"root-class-name\" :root-style=\"{ color: 'blue' }\"\r\n    style=\"color: red\" title=\"产品添加\" placement=\"right\" @after-open-change=\"afterOpenChange\" @close=\"closeDrawer\">\r\n    <a-form :model=\"formState\" v-bind=\"layout\" :validate-messages=\"validateMessages\" :wrapperCol=\"{ span: 16 }\"\r\n      :label-col=\"{ span: 6 }\" ref=\"formRef\" @finish=\"onFinish\">\r\n      <a-form-item name=\"name\" label=\"产品名称\" :rules=\"[{ required: true, message: '请输入产品名称！' }]\">\r\n        <a-input v-model:value=\"formState.name\" />\r\n      </a-form-item>\r\n      <a-form-item name=\"price\" label=\"价格\" :rules=\"[{ required: true, message: '请输入价格！' }]\">\r\n        <a-input v-model:value=\"formState.price\" />\r\n      </a-form-item>\r\n      <a-form-item name=\"categories\" label=\"类别\">\r\n        <a-radio-group v-model:value=\"formState.categories\" name=\"radioGroup\">\r\n          <a-radio v-for=\"(item, index) in categoriesList\" :key=\"index\" :value=\"item.id\">{{ item.name }}</a-radio>\r\n        </a-radio-group>\r\n      </a-form-item>\r\n      <a-form-item :wrapperCol=\"{ offset: 8, span: 16 }\">\r\n        <a-button class=\"add\" html-type=\"submit\">添加</a-button>\r\n        <a-button class=\"clear\" html-type=\"reset\" @click=\"onClear\">清空</a-button>\r\n      </a-form-item>\r\n    </a-form>\r\n  </a-drawer>\r\n</template>\r\n\r\n<script setup>\r\nimport { reactive, ref, toRefs, inject, watch } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport { $categorieslist, $addProduct, $getProduct } from '../../api/proinfo.js'\r\n\r\nconst formRef = ref();\r\nlet loadData = inject('loadData')\r\nlet id = inject('id')\r\nlet dataSource = reactive({\r\n  formState: {\r\n    name: '',\r\n    price: '',\r\n    categories: ''// 用于存储选中的类别ID\r\n  },\r\n  categoriesList: []  // 用于存储类别列表\r\n})\r\n\r\nlet { showDrawer, no } = defineProps([\"showDrawer\", \"no\"]);\r\nlet { formState, categoriesList } = toRefs(dataSource);\r\nlet emit = defineEmits(['sync-drawer'])\r\n\r\nwatch(() => id.value, (nval) => {\r\n  $getProduct(nval).then(r => {\r\n    // 更新formState的值\r\n   dataSource.formState=r\r\n    console.log(dataSource.formState.name);  // 检查是否正确更新\r\n  });\r\n});\r\n\r\nlet afterOpenChange = (val) => {\r\n  if (!val) {\r\n    emit('sync-drawer', val)\r\n  }\r\n}\r\n\r\nconst closeDrawer = () => {\r\n  emit('sync-drawer', false);\r\n};\r\n\r\nlet onFinish = () => {\r\n  const newProduct = {\r\n    name: dataSource.formState.name,\r\n    price: dataSource.formState.price,\r\n    categories: {\r\n      create: [\r\n        { categories_id: dataSource.formState.categories },  // 关联类别的 ID\r\n      ]\r\n    }\r\n  };\r\n  $addProduct(newProduct)\r\n    .then(response => {\r\n      message.success(\"产品添加成功1\");\r\n      formRef.value.resetFields();\r\n      console.log(response);\r\n      loadData()\r\n    })\r\n    .catch(error => {\r\n      message.error(\"产品添加失败1\");\r\n        });\r\n}\r\n\r\nlet loadCate = () => {\r\n  $categorieslist().then(r => {\r\n    dataSource.categoriesList = r.map(item => ({ id: item.id, name: item.name }));\r\n    console.log(dataSource.categoriesList);  // 检查类别列表\r\n  })\r\n}\r\n\r\nlet onClear = () => {\r\n  formRef.value.resetFields();\r\n}\r\n\r\nloadCate();\r\n</script>\r\n"],"mappings":";;AAyBA,SAASA,QAAQ,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,KAAK;AAC1D,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SAASC,eAAe,EAAEC,WAAW,EAAEC,WAAW,QAAQ,sBAAsB;;;;;;;;;;IAEhF,MAAMC,OAAO,GAAGR,GAAG,CAAC,CAAC;IACrB,IAAIS,QAAQ,GAAGP,MAAM,CAAC,UAAU,CAAC;IACjC,IAAIQ,EAAE,GAAGR,MAAM,CAAC,IAAI,CAAC;IACrB,IAAIS,UAAU,GAAGZ,QAAQ,CAAC;MACxBa,SAAS,EAAE;QACTC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,UAAU,EAAE,EAAE;MAChB,CAAC;MACDC,cAAc,EAAE,EAAE,CAAE;IACtB,CAAC,CAAC;IAGF,IAAI;MAAEJ,SAAS;MAAEI;IAAe,CAAC,GAAGf,MAAM,CAACU,UAAU,CAAC;IACtD,IAAIM,IAAI,GAAGC,MAA4B;IAEvCf,KAAK,CAAC,MAAMO,EAAE,CAACS,KAAK,EAAGC,IAAI,IAAK;MAC9Bb,WAAW,CAACa,IAAI,CAAC,CAACC,IAAI,CAACC,CAAC,IAAI;QAC1B;QACDX,UAAU,CAACC,SAAS,GAACU,CAAC;QACrBC,OAAO,CAACC,GAAG,CAACb,UAAU,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC,CAAE;MAC3C,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,IAAIY,eAAe,GAAIC,GAAG,IAAK;MAC7B,IAAI,CAACA,GAAG,EAAE;QACRT,IAAI,CAAC,aAAa,EAAES,GAAG,CAAC;MAC1B;IACF,CAAC;IAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;MACxBV,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC;IAC5B,CAAC;IAED,IAAIW,QAAQ,GAAGA,CAAA,KAAM;MACnB,MAAMC,UAAU,GAAG;QACjBhB,IAAI,EAAEF,UAAU,CAACC,SAAS,CAACC,IAAI;QAC/BC,KAAK,EAAEH,UAAU,CAACC,SAAS,CAACE,KAAK;QACjCC,UAAU,EAAE;UACVe,MAAM,EAAE,CACN;YAAEC,aAAa,EAAEpB,UAAU,CAACC,SAAS,CAACG;UAAW,CAAC,CAAG;UAAA;QAEzD;MACF,CAAC;MACDT,WAAW,CAACuB,UAAU,CAAC,CACpBR,IAAI,CAACW,QAAQ,IAAI;QAChB5B,OAAO,CAAC6B,OAAO,CAAC,SAAS,CAAC;QAC1BzB,OAAO,CAACW,KAAK,CAACe,WAAW,CAAC,CAAC;QAC3BX,OAAO,CAACC,GAAG,CAACQ,QAAQ,CAAC;QACrBvB,QAAQ,CAAC,CAAC;MACZ,CAAC,CAAC,CACD0B,KAAK,CAACC,KAAK,IAAI;QACdhC,OAAO,CAACgC,KAAK,CAAC,SAAS,CAAC;MACtB,CAAC,CAAC;IACV,CAAC;IAED,IAAIC,QAAQ,GAAGA,CAAA,KAAM;MACnBhC,eAAe,CAAC,CAAC,CAACgB,IAAI,CAACC,CAAC,IAAI;QAC1BX,UAAU,CAACK,cAAc,GAAGM,CAAC,CAACgB,GAAG,CAACC,IAAI,KAAK;UAAE7B,EAAE,EAAE6B,IAAI,CAAC7B,EAAE;UAAEG,IAAI,EAAE0B,IAAI,CAAC1B;QAAK,CAAC,CAAC,CAAC;QAC7EU,OAAO,CAACC,GAAG,CAACb,UAAU,CAACK,cAAc,CAAC,CAAC,CAAE;MAC3C,CAAC,CAAC;IACJ,CAAC;IAED,IAAIwB,OAAO,GAAGA,CAAA,KAAM;MAClBhC,OAAO,CAACW,KAAK,CAACe,WAAW,CAAC,CAAC;IAC7B,CAAC;IAEDG,QAAQ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}