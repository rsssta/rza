{"ast":null,"code":"import \"core-js/modules/es.array.with.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { reactive, toRefs, ref, watch, inject } from 'vue';\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nimport { message } from 'ant-design-vue';\nimport { $categorieslist, $addProduct, $delProduct, $getProduct } from '../../api/proinfo.js';\nexport default {\n  __name: 'productsinfo',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n\n    // import addProduct from '../../components/product/addProduct.vue'\n    const searchKeyword = ref('');\n    const open = ref(false);\n    const formRef = ref();\n    const afterOpenChange = bool => {\n      formRef.value.resetFields();\n    };\n    const showDrawer = () => {\n      open.value = true;\n    };\n    // 数据源\n    let dataSource = reactive({\n      tableDatas: [],\n      // 确保 dataSource.tableDatas 一开始是空数组\n      tableColumns: [{\n        title: '产品id',\n        dataIndex: 'id',\n        key: 'id'\n      }, {\n        title: '产品名称',\n        dataIndex: 'name'\n      }, {\n        title: '价格',\n        dataIndex: 'price'\n      }, {\n        title: '类别',\n        dataIndex: 'categories'\n      }, {\n        title: '操作',\n        dataIndex: 'operation'\n      }],\n      formState: {\n        name: '',\n        price: '',\n        categories: {\n          create: [{\n            categories_id: ''\n          } // 关联类别的 ID // 如果有多个类别\n          ]\n        }\n      },\n      categoriesList: []\n    });\n    // 使用 `toRefs` 解构 `reactive` 数据，方便在模板中直接使用\n    let {\n      tableDatas,\n      tableColumns,\n      formState,\n      categoriesList\n    } = toRefs(dataSource);\n    let onFinish = () => {\n      const newProduct = {\n        name: dataSource.formState.name,\n        price: dataSource.formState.price,\n        categories: {\n          create: [{\n            categories_id: dataSource.formState.categories\n          } // 关联类别的 ID // 如果有多个类别\n          ]\n        }\n      };\n      $addProduct(newProduct).then(response => {\n        message.success(\"产品添加成功\");\n        loadData();\n      }).catch(error => {\n        message.error(\"产品添加失败\");\n      });\n      // const selectedCategoryName = formState.categories;\n      // const selectedCategory = dataSource.categoriesList.find(\n      //   (category) => category.name === selectedCategoryName\n      // );\n\n      // if (selectedCategory) {\n      //   // 将类别的 id 赋值给 formState.categories\n      //   formState.categories = selectedCategory.id;\n      // }\n      // const payload = {\n      //   name: dataSource.formState.name,\n      //   price: dataSource.formState.price,\n      //   categories: {\n      //     create: [{ id: dataSource.formState.categories }] // 将选中的 category id 转换为对象\n      //   }\n      // };\n\n      // console.log(dataSource.formState);\n      // $addProduct(dataSource.formState);\n      // $addProduct({\n      //   name: 666,\n      //   price: 12312312,\n      //   categories:  [ { id:'2'} ]   // 直接传递完整的 categories 对象\n      // });\n    };\n    let onEdit = async id => {\n      let nid = inject(id);\n      console.log(nid);\n      open.value = true;\n      try {\n        const r = await $getProduct(id); // 获取产品数据\n        console.log('Fetched product:', r);\n        dataSource.formState = r;\n      } catch (error) {\n        console.error('Error fetching product:', error);\n      }\n    };\n    let onClear = () => {\n      formRef.value.resetFields();\n    };\n    let onDelete = async id => {\n      try {\n        const success = await $delProduct(id); // 等待删除完成\n\n        if (success) {\n          message.success(\"产品删除成功\");\n          loadData(); // 重新加载数据\n        } else {\n          message.error(\"产品删除失败\");\n        }\n      } catch (error) {\n        message.error(\"删除产品时发生错误：\" + error.message);\n      }\n    };\n    const client = createDirectus('http://localhost:8055').with(rest());\n    let loadCate = () => {\n      $categorieslist().then(r => {\n        dataSource.categoriesList = r.map(item => ({\n          id: item.id,\n          name: item.name\n        }));\n        // console.log(r);\n      });\n    };\n    let loadData = async (searchKeyword = '') => {\n      try {\n        const filter = searchKeyword ? {\n          filter: {\n            name: {\n              _contains: searchKeyword // 直接查询包含关键字的产品\n            }\n          }\n        } : {};\n        const result = await client.request(readItems('products', {\n          fields: ['*,categories.categories_id.name'],\n          ...filter\n        }));\n        result.forEach(item => {\n          item.categories = item.categories.map(cat => cat.categories_id.name).join(', ');\n        });\n        tableDatas.value = result;\n        console.log(tableDatas);\n      } catch (error) {\n        console.error('Failed to fetch items:', error);\n      }\n    };\n    loadData();\n    loadCate();\n    let onSearch = value => {\n      searchKeyword.value = value;\n      loadData(value); // 传递搜索内容\n    };\n    const __returned__ = {\n      searchKeyword,\n      open,\n      formRef,\n      afterOpenChange,\n      showDrawer,\n      get dataSource() {\n        return dataSource;\n      },\n      set dataSource(v) {\n        dataSource = v;\n      },\n      get tableDatas() {\n        return tableDatas;\n      },\n      set tableDatas(v) {\n        tableDatas = v;\n      },\n      get tableColumns() {\n        return tableColumns;\n      },\n      set tableColumns(v) {\n        tableColumns = v;\n      },\n      get formState() {\n        return formState;\n      },\n      set formState(v) {\n        formState = v;\n      },\n      get categoriesList() {\n        return categoriesList;\n      },\n      set categoriesList(v) {\n        categoriesList = v;\n      },\n      get onFinish() {\n        return onFinish;\n      },\n      set onFinish(v) {\n        onFinish = v;\n      },\n      get onEdit() {\n        return onEdit;\n      },\n      set onEdit(v) {\n        onEdit = v;\n      },\n      get onClear() {\n        return onClear;\n      },\n      set onClear(v) {\n        onClear = v;\n      },\n      get onDelete() {\n        return onDelete;\n      },\n      set onDelete(v) {\n        onDelete = v;\n      },\n      client,\n      get loadCate() {\n        return loadCate;\n      },\n      set loadCate(v) {\n        loadCate = v;\n      },\n      get loadData() {\n        return loadData;\n      },\n      set loadData(v) {\n        loadData = v;\n      },\n      get onSearch() {\n        return onSearch;\n      },\n      set onSearch(v) {\n        onSearch = v;\n      },\n      reactive,\n      toRefs,\n      ref,\n      watch,\n      inject,\n      get createDirectus() {\n        return createDirectus;\n      },\n      get rest() {\n        return rest;\n      },\n      get readItems() {\n        return readItems;\n      },\n      get message() {\n        return message;\n      },\n      get $categorieslist() {\n        return $categorieslist;\n      },\n      get $addProduct() {\n        return $addProduct;\n      },\n      get $delProduct() {\n        return $delProduct;\n      },\n      get $getProduct() {\n        return $getProduct;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["reactive","toRefs","ref","watch","inject","createDirectus","rest","readItems","message","$categorieslist","$addProduct","$delProduct","$getProduct","searchKeyword","open","formRef","afterOpenChange","bool","value","resetFields","showDrawer","dataSource","tableDatas","tableColumns","title","dataIndex","key","formState","name","price","categories","create","categories_id","categoriesList","onFinish","newProduct","then","response","success","loadData","catch","error","onEdit","id","nid","console","log","r","onClear","onDelete","client","with","loadCate","map","item","filter","_contains","result","request","fields","forEach","cat","join","onSearch"],"sources":["E:/permisson/demo/src/views/products/productsinfo.vue"],"sourcesContent":["<template>\r\n  <div class=\"search\">\r\n    <a-input-search class=\"searchText\" v-model:value=\"searchKeyword\" placeholder=\"请输入产品名称\" enter-button=\"查询\"\r\n      size=\"default\" @search=\"onSearch\" />\r\n    <a-button type=\"primary\" class=\"add-a\" @click=\"showDrawer\">添加</a-button>\r\n  </div>\r\n  <a-table :dataSource=\"tableDatas\" :columns=\"tableColumns\">\r\n    <template #bodyCell=\"{ column, text, record }\">\r\n      <template v-if=\"column.dataIndex === 'operation'\">\r\n        <a @click=\"onEdit(record.id)\">编辑</a>\r\n        <a-popconfirm title=\"确定删除吗?\" okText=\"确定\" cancelText=\"取消\" @confirm=\"onDelete(record.id)\">\r\n          <a>删除</a>\r\n        </a-popconfirm>\r\n      </template>\r\n    </template>\r\n  </a-table>\r\n  <a-drawer v-model:open=\"open\" class=\"custom-class\" root-class-name=\"root-class-name\" :root-style=\"{ color: 'blue' }\"\r\n    style=\"color: red\" title=\"产品添加\" placement=\"right\" @after-open-change=\"afterOpenChange\">\r\n    <a-form :model=\"formState\" v-bind=\"layout\" :validate-messages=\"validateMessages\" :wrapperCol=\"{ span: 16 }\"\r\n      :label-col=\"{ span: 6 }\" ref=\"formRef\" @finish=\"onFinish\">\r\n      <a-form-item name=\"name\" label=\"产品名称\" :rules=\"[{ required: true, message: '请输入产品名称！' }]\">\r\n        <a-input v-model:value=\"formState.name\" />\r\n      </a-form-item>\r\n      <a-form-item name=\"price\" label=\"价格\" :rules=\"[{ required: true, message: '请输入价格！' }]\">\r\n        <a-input v-model:value=\"formState.price\" />\r\n      </a-form-item>\r\n      <a-form-item name=\"categories\" label=\"类别\">\r\n        <a-radio-group v-model:value=\"formState.categories\" name=\"radioGroup\">\r\n          <a-radio v-for=\"(item, index) in categoriesList\" :key=\"index\" :value=\"item.id\">{{ item.name }}</a-radio>\r\n        </a-radio-group>\r\n      </a-form-item>\r\n      <a-form-item :wrapperCol=\"{ offset: 8, span: 16 }\">\r\n        <a-button class=\"add\" html-type=\"submit\">添加</a-button>\r\n        <a-button class=\"clear\" html-type=\"reset\" @click=\"onClear\">清空</a-button>\r\n      </a-form-item>\r\n    </a-form>\r\n  </a-drawer>\r\n</template>\r\n\r\n<script setup>\r\n// import addProduct from '../../components/product/addProduct.vue'\r\nimport { reactive, toRefs, ref ,watch, inject} from 'vue';\r\nimport { createDirectus, rest, readItems } from '@directus/sdk';\r\nimport { message } from 'ant-design-vue';\r\nimport { $categorieslist, $addProduct,$delProduct,$getProduct } from '../../api/proinfo.js'\r\nconst searchKeyword = ref('');\r\nconst open = ref(false);\r\nconst formRef = ref();\r\nconst afterOpenChange = bool => {\r\n  formRef.value.resetFields();\r\n};\r\nconst showDrawer = () => {\r\n  open.value = true;\r\n};\r\n// 数据源\r\nlet dataSource = reactive({\r\n  tableDatas: [],  // 确保 dataSource.tableDatas 一开始是空数组\r\n  tableColumns: [\r\n    {\r\n      title: '产品id',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n    },\r\n    {\r\n      title: '产品名称',\r\n      dataIndex: 'name'\r\n    },\r\n    {\r\n      title: '价格',\r\n      dataIndex: 'price'\r\n    },\r\n    {\r\n      title: '类别',\r\n      dataIndex: 'categories',\r\n    },\r\n    {\r\n      title: '操作',\r\n      dataIndex: 'operation'\r\n    }\r\n  ],\r\n  formState: {\r\n    name: '',\r\n    price: '',\r\n    categories: {\r\n      create: [\r\n        { categories_id: '' }, // 关联类别的 ID // 如果有多个类别\r\n      ]\r\n    }\r\n  },\r\n  categoriesList: []\r\n});\r\n// 使用 `toRefs` 解构 `reactive` 数据，方便在模板中直接使用\r\nlet { tableDatas, tableColumns, formState, categoriesList } = toRefs(dataSource);\r\nlet onFinish = () => {\r\n  const newProduct = {\r\n    name: dataSource.formState.name,\r\n    price: dataSource.formState.price,\r\n    categories: {\r\n      create: [\r\n        { categories_id: dataSource.formState.categories }, // 关联类别的 ID // 如果有多个类别\r\n      ]\r\n    }\r\n  };\r\n  $addProduct(newProduct)\r\n    .then(response => {\r\n      message.success(\"产品添加成功\");\r\n      loadData()\r\n    })\r\n    .catch(error => {\r\n      message.error(\"产品添加失败\");\r\n    });\r\n  // const selectedCategoryName = formState.categories;\r\n  // const selectedCategory = dataSource.categoriesList.find(\r\n  //   (category) => category.name === selectedCategoryName\r\n  // );\r\n\r\n  // if (selectedCategory) {\r\n  //   // 将类别的 id 赋值给 formState.categories\r\n  //   formState.categories = selectedCategory.id;\r\n  // }\r\n  // const payload = {\r\n  //   name: dataSource.formState.name,\r\n  //   price: dataSource.formState.price,\r\n  //   categories: {\r\n  //     create: [{ id: dataSource.formState.categories }] // 将选中的 category id 转换为对象\r\n  //   }\r\n  // };\r\n\r\n  // console.log(dataSource.formState);\r\n  // $addProduct(dataSource.formState);\r\n  // $addProduct({\r\n  //   name: 666,\r\n  //   price: 12312312,\r\n  //   categories:  [ { id:'2'} ]   // 直接传递完整的 categories 对象\r\n  // });\r\n}\r\nlet onEdit = async(id) => {\r\n  let nid=inject(id)\r\n  console.log(nid);\r\n  \r\n  open.value = true;\r\n  try {\r\n    const r = await $getProduct(id); // 获取产品数据\r\n    console.log('Fetched product:', r);\r\n    dataSource.formState = r;\r\n  } catch (error) {\r\n    console.error('Error fetching product:', error);\r\n  }\r\n}\r\nlet onClear = () => {\r\n  formRef.value.resetFields();\r\n}\r\nlet onDelete = async (id) => {\r\n  try {\r\n    const success = await $delProduct(id); // 等待删除完成\r\n\r\n    if (success) {\r\n      message.success(\"产品删除成功\");\r\n      loadData(); // 重新加载数据\r\n    } else {\r\n      message.error(\"产品删除失败\");\r\n    }\r\n  } catch (error) {\r\n    message.error(\"删除产品时发生错误：\" + error.message);\r\n  }\r\n};\r\n\r\nconst client = createDirectus('http://localhost:8055').with(rest());\r\nlet loadCate = () => {\r\n  $categorieslist().then(r => {\r\n    dataSource.categoriesList = r.map(item => ({ id: item.id, name: item.name }));\r\n    // console.log(r);\r\n\r\n  })\r\n}\r\nlet loadData = async (searchKeyword = '') => {\r\n  try {\r\n    const filter = searchKeyword\r\n      ? {\r\n        filter: {\r\n          name: {\r\n            _contains: searchKeyword, // 直接查询包含关键字的产品\r\n          },\r\n        },\r\n      }\r\n      : {};\r\n\r\n    const result = await client.request(readItems('products', {\r\n      fields: [\r\n        '*,categories.categories_id.name'\r\n      ],\r\n      ...filter\r\n    }));\r\n    result.forEach(item => {\r\n      item.categories = item.categories.map(cat => cat.categories_id.name).join(', ');\r\n    });\r\n    tableDatas.value = result\r\n    console.log(tableDatas);\r\n\r\n  } catch (error) {\r\n    console.error('Failed to fetch items:', error);\r\n  }\r\n};\r\nloadData()\r\nloadCate()\r\nlet onSearch = (value) => {\r\n  searchKeyword.value = value;\r\n  loadData(value);  // 传递搜索内容\r\n}\r\n</script>\r\n<style scoped lang=\"scss\">\r\n.search {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n\r\n  .searchText {\r\n    width: 300px;\r\n  }\r\n\r\n  .add-a {\r\n    background: red;\r\n    border: none;\r\n  }\r\n\r\n  .add {\r\n    background: #bacf65;\r\n    border: none;\r\n    color: white\r\n  }\r\n\r\n  .clear {\r\n    margin-left: 10px;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}