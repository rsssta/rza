{"ast":null,"code":"import \"core-js/modules/es.array.with.js\";\nimport { reactive, toRefs, onMounted } from 'vue';\nimport { createDirectus, rest, readItems } from '@directus/sdk';\n\n// 数据源\n\nexport default {\n  __name: 'productsinfo',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    let dataSource = reactive({\n      tableDatas: [],\n      // 确保 dataSource.tableDatas 一开始是空数组\n      tableColumns: [{\n        title: '产品id',\n        dataIndex: 'id',\n        key: 'id'\n      }, {\n        title: '产品名称',\n        dataIndex: 'name',\n        key: 'name'\n      }, {\n        title: '价格',\n        dataIndex: 'price',\n        key: 'price'\n      }, {\n        title: '类别',\n        dataIndex: 'sort',\n        key: 'sort'\n      }]\n    });\n\n    // 使用 `toRefs` 解构 `reactive` 数据，方便在模板中直接使用\n    let {\n      tableDatas,\n      tableColumns\n    } = toRefs(dataSource);\n    const client = createDirectus('http://localhost:8055').with(rest());\n\n    // 数据存储和状态管理\n    onMounted(async () => {\n      await fetchItems();\n    });\n\n    // 获取产品数据\n    async function fetchItems() {\n      try {\n        const result = await client.request(readItems('products', {\n          fields: ['*']\n        }));\n        console.log(result);\n\n        // 将返回的数据赋值给 tableDatas\n        tableDatas.value = result;\n      } catch (error) {\n        console.error('Failed to fetch items:', error);\n      }\n    }\n    ;\n    const __returned__ = {\n      get dataSource() {\n        return dataSource;\n      },\n      set dataSource(v) {\n        dataSource = v;\n      },\n      get tableDatas() {\n        return tableDatas;\n      },\n      set tableDatas(v) {\n        tableDatas = v;\n      },\n      get tableColumns() {\n        return tableColumns;\n      },\n      set tableColumns(v) {\n        tableColumns = v;\n      },\n      client,\n      fetchItems,\n      reactive,\n      toRefs,\n      onMounted,\n      get createDirectus() {\n        return createDirectus;\n      },\n      get rest() {\n        return rest;\n      },\n      get readItems() {\n        return readItems;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["reactive","toRefs","onMounted","createDirectus","rest","readItems","dataSource","tableDatas","tableColumns","title","dataIndex","key","client","with","fetchItems","result","request","fields","console","log","value","error"],"sources":["E:/permisson/demo/src/views/products/productsinfo.vue"],"sourcesContent":["<template>\r\n  <div class=\"search\">\r\n    <a-input-search\r\n    class=\"searchText\"\r\n      v-model:value=\"value\"\r\n      placeholder=\"请输入产品名称\"\r\n      enter-button=\"Search\"\r\n      size=\"default\"\r\n      @search=\"onSearch\"\r\n    />\r\n  </div>\r\n  <a-table :dataSource=\"tableDatas\" :columns=\"tableColumns\" />\r\n</template>\r\n\r\n<script setup>\r\nimport { reactive, toRefs, onMounted } from 'vue';\r\nimport { createDirectus, rest, readItems } from '@directus/sdk';\r\n\r\n// 数据源\r\nlet dataSource = reactive({\r\n  tableDatas: [],  // 确保 dataSource.tableDatas 一开始是空数组\r\n  tableColumns: [\r\n      {\r\n          title: '产品id',\r\n          dataIndex: 'id',\r\n          key: 'id',\r\n      },\r\n      {\r\n          title: '产品名称',\r\n          dataIndex: 'name',\r\n          key: 'name',\r\n      },\r\n      {\r\n          title: '价格',\r\n          dataIndex: 'price',\r\n          key: 'price',\r\n      },\r\n      {\r\n          title: '类别',\r\n          dataIndex: 'sort',\r\n          key: 'sort',\r\n      }\r\n  ]\r\n});\r\n\r\n// 使用 `toRefs` 解构 `reactive` 数据，方便在模板中直接使用\r\nlet { tableDatas, tableColumns } = toRefs(dataSource);\r\nconst client = createDirectus('http://localhost:8055').with(rest());\r\n\r\n// 数据存储和状态管理\r\nonMounted(async () => {\r\nawait fetchItems();\r\n});\r\n\r\n// 获取产品数据\r\nasync function fetchItems() {\r\ntry {\r\n  const result = await client.request(readItems('products', {\r\n    fields: ['*'],\r\n  }));\r\n  console.log(result);\r\n\r\n  // 将返回的数据赋值给 tableDatas\r\n  tableDatas.value = result\r\n} catch (error) {\r\n  console.error('Failed to fetch items:', error);\r\n}\r\n};\r\n</script>\r\n<style scoped lang=\"scss\">\r\n.search{\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  .searchText{\r\n    width: 300px;\r\n  }\r\n}\r\n</style>"],"mappings":";AAeA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,KAAK;AACjD,SAASC,cAAc,EAAEC,IAAI,EAAEC,SAAS,QAAQ,eAAe;;AAE/D;;;;;;;;IACA,IAAIC,UAAU,GAAGN,QAAQ,CAAC;MACxBO,UAAU,EAAE,EAAE;MAAG;MACjBC,YAAY,EAAE,CACV;QACIC,KAAK,EAAE,MAAM;QACbC,SAAS,EAAE,IAAI;QACfC,GAAG,EAAE;MACT,CAAC,EACD;QACIF,KAAK,EAAE,MAAM;QACbC,SAAS,EAAE,MAAM;QACjBC,GAAG,EAAE;MACT,CAAC,EACD;QACIF,KAAK,EAAE,IAAI;QACXC,SAAS,EAAE,OAAO;QAClBC,GAAG,EAAE;MACT,CAAC,EACD;QACIF,KAAK,EAAE,IAAI;QACXC,SAAS,EAAE,MAAM;QACjBC,GAAG,EAAE;MACT,CAAC;IAEP,CAAC,CAAC;;IAEF;IACA,IAAI;MAAEJ,UAAU;MAAEC;IAAa,CAAC,GAAGP,MAAM,CAACK,UAAU,CAAC;IACrD,MAAMM,MAAM,GAAGT,cAAc,CAAC,uBAAuB,CAAC,CAACU,IAAI,CAACT,IAAI,CAAC,CAAC,CAAC;;IAEnE;IACAF,SAAS,CAAC,YAAY;MACtB,MAAMY,UAAU,CAAC,CAAC;IAClB,CAAC,CAAC;;IAEF;IACA,eAAeA,UAAUA,CAAA,EAAG;MAC5B,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMH,MAAM,CAACI,OAAO,CAACX,SAAS,CAAC,UAAU,EAAE;UACxDY,MAAM,EAAE,CAAC,GAAG;QACd,CAAC,CAAC,CAAC;QACHC,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;;QAEnB;QACAR,UAAU,CAACa,KAAK,GAAGL,MAAM;MAC3B,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACA;IAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}