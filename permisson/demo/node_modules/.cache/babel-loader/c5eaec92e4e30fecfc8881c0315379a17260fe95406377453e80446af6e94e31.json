{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"search\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_a_input_search = _resolveComponent(\"a-input-search\");\n  const _component_a_table = _resolveComponent(\"a-table\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_a_input_search, {\n    class: \"searchText\",\n    value: _ctx.value,\n    \"onUpdate:value\": _cache[0] || (_cache[0] = $event => _ctx.value = $event),\n    placeholder: \"请输入产品名称\",\n    \"enter-button\": \"查询\",\n    size: \"default\",\n    onSearch: _ctx.onSearch\n  }, null, 8 /* PROPS */, [\"value\", \"onSearch\"])]), _createVNode(_component_a_table, {\n    dataSource: $setup.tableDatas,\n    columns: $setup.tableColumns\n  }, null, 8 /* PROPS */, [\"dataSource\", \"columns\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_createVNode","_component_a_input_search","value","_ctx","_cache","$event","placeholder","size","onSearch","_component_a_table","dataSource","$setup","tableDatas","columns","tableColumns"],"sources":["E:\\permisson\\demo\\src\\views\\products\\productsinfo.vue"],"sourcesContent":["<template>\r\n  <div class=\"search\">\r\n    <a-input-search\r\n    class=\"searchText\"\r\n      v-model:value=\"value\"\r\n      placeholder=\"请输入产品名称\"\r\n      enter-button=\"查询\"\r\n      size=\"default\"\r\n      @search=\"onSearch\"\r\n    />\r\n  </div>\r\n  <a-table :dataSource=\"tableDatas\" :columns=\"tableColumns\" />\r\n</template>\r\n\r\n<script setup>\r\nimport { reactive, toRefs, onMounted } from 'vue';\r\nimport { createDirectus, rest, readItems } from '@directus/sdk';\r\n\r\n// 数据源\r\nlet dataSource = reactive({\r\n  tableDatas: [],  // 确保 dataSource.tableDatas 一开始是空数组\r\n  tableColumns: [\r\n      {\r\n          title: '产品id',\r\n          dataIndex: 'id',\r\n          key: 'id',\r\n      },\r\n      {\r\n          title: '产品名称',\r\n          dataIndex: 'name',\r\n          key: 'name',\r\n      },\r\n      {\r\n          title: '价格',\r\n          dataIndex: 'price',\r\n          key: 'price',\r\n      },\r\n      {\r\n          title: '类别',\r\n          dataIndex: 'sort',\r\n          key: 'sort',\r\n      }\r\n  ]\r\n});\r\n\r\n// 使用 `toRefs` 解构 `reactive` 数据，方便在模板中直接使用\r\nlet { tableDatas, tableColumns } = toRefs(dataSource);\r\nconst client = createDirectus('http://localhost:8055').with(rest());\r\n\r\n// 数据存储和状态管理\r\nonMounted(async () => {\r\nawait fetchItems();\r\n});\r\n\r\n// 获取产品数据\r\nasync function fetchItems() {\r\ntry {\r\n  const result = await client.request(readItems('products', {\r\n    fields: ['*'],\r\n  }));\r\n  console.log(result);\r\n\r\n  // 将返回的数据赋值给 tableDatas\r\n  tableDatas.value = result\r\n} catch (error) {\r\n  console.error('Failed to fetch items:', error);\r\n}\r\n};\r\n</script>\r\n<style scoped lang=\"scss\">\r\n.search{\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  .searchText{\r\n    width: 300px;\r\n  }\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAQ;;;;uBADrBC,mBAAA,CAAAC,SAAA,SACEC,mBAAA,CASM,OATNC,UASM,GARJC,YAAA,CAOEC,yBAAA;IANFN,KAAK,EAAC,YAAY;IACRO,KAAK,EAAEC,IAAA,CAAAD,KAAK;IAJ1B,kBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAIqBF,IAAA,CAAAD,KAAK,GAAAG,MAAA;IACpBC,WAAW,EAAC,SAAS;IACrB,cAAY,EAAC,IAAI;IACjBC,IAAI,EAAC,SAAS;IACbC,QAAM,EAAEL,IAAA,CAAAK;oDAGbR,YAAA,CAA4DS,kBAAA;IAAlDC,UAAU,EAAEC,MAAA,CAAAC,UAAU;IAAGC,OAAO,EAAEF,MAAA,CAAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}