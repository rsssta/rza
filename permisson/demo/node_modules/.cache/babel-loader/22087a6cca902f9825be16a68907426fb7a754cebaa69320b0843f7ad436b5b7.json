{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { reactive, ref, toRefs, inject, watch } from 'vue';\nimport { message } from 'ant-design-vue';\nimport { $categorieslist, $addProduct, $getProduct, $updateProduct } from '../../api/proinfo.js';\nexport default {\n  __name: 'addProduct',\n  props: [\"showDrawer\", \"no\"],\n  emits: ['sync-drawer'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const formRef = ref();\n    let loadData = inject('loadData');\n    let id = inject('id');\n    let dataSource = reactive({\n      formState: {\n        id: '',\n        name: '',\n        price: '',\n        categories: {\n\n          // 关联类别的 ID // 如果有多个类别\n        } // 用于存储选中的类别ID\n      },\n      categoriesList: [] // 用于存储类别列表\n    });\n    let {\n      formState,\n      categoriesList\n    } = toRefs(dataSource);\n    let emit = __emit;\n    watch(() => id.value, nval => {\n      $getProduct(nval).then(r => {\n        // 更新formState的值\n        const product = r[0]; // 假设返回的是一个产品数组\n        dataSource.formState.name = product.name;\n        dataSource.formState.price = product.price;\n        dataSource.formState.id = product.id;\n        console.log(r);\n        // 选择类别的 ID 和 name\n        if (product.categories && product.categories.length > 0) {\n          const category = product.categories[0]?.categories_id; // 获取第一个类别\n          dataSource.formState.categories = {\n            id: category?.id || '',\n            name: category?.name || ''\n          };\n        } else {\n          dataSource.formState.categories = {\n            id: '',\n            name: ''\n          }; // 如果没有类别，默认空值\n        }\n      });\n    });\n    let afterOpenChange = val => {\n      if (!val) {\n        emit('sync-drawer', val);\n        onClear();\n      }\n    };\n    const closeDrawer = () => {\n      emit('sync-drawer', false);\n      onClear();\n    };\n    let onFinish = async () => {\n      if (id.value) {\n        await $updateProduct(dataSource.formState);\n        loadData();\n      } else {\n        const newProduct = {\n          name: dataSource.formState.name,\n          price: dataSource.formState.price,\n          categories: {\n            create: [{\n              categories_id: dataSource.formState.categories\n            } // 关联类别的 ID\n            ]\n          }\n        };\n        await $addProduct(newProduct).then(response => {\n          message.success(\"产品添加成功1\");\n          onClear();\n          console.log(response);\n          loadData();\n        }).catch(error => {\n          message.error(\"产品添加失败1\");\n        });\n      }\n    };\n    let loadCate = () => {\n      $categorieslist().then(r => {\n        dataSource.categoriesList = r.map(item => ({\n          id: item.id,\n          name: item.name\n        }));\n        console.log(dataSource.categoriesList); // 检查类别列表\n      });\n    };\n    let onClear = () => {\n      formRef.value.resetFields();\n    };\n    loadCate();\n    const __returned__ = {\n      formRef,\n      get loadData() {\n        return loadData;\n      },\n      set loadData(v) {\n        loadData = v;\n      },\n      get id() {\n        return id;\n      },\n      set id(v) {\n        id = v;\n      },\n      get dataSource() {\n        return dataSource;\n      },\n      set dataSource(v) {\n        dataSource = v;\n      },\n      get formState() {\n        return formState;\n      },\n      set formState(v) {\n        formState = v;\n      },\n      get categoriesList() {\n        return categoriesList;\n      },\n      set categoriesList(v) {\n        categoriesList = v;\n      },\n      get emit() {\n        return emit;\n      },\n      set emit(v) {\n        emit = v;\n      },\n      get afterOpenChange() {\n        return afterOpenChange;\n      },\n      set afterOpenChange(v) {\n        afterOpenChange = v;\n      },\n      closeDrawer,\n      get onFinish() {\n        return onFinish;\n      },\n      set onFinish(v) {\n        onFinish = v;\n      },\n      get loadCate() {\n        return loadCate;\n      },\n      set loadCate(v) {\n        loadCate = v;\n      },\n      get onClear() {\n        return onClear;\n      },\n      set onClear(v) {\n        onClear = v;\n      },\n      reactive,\n      ref,\n      toRefs,\n      inject,\n      watch,\n      get message() {\n        return message;\n      },\n      get $categorieslist() {\n        return $categorieslist;\n      },\n      get $addProduct() {\n        return $addProduct;\n      },\n      get $getProduct() {\n        return $getProduct;\n      },\n      get $updateProduct() {\n        return $updateProduct;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["reactive","ref","toRefs","inject","watch","message","$categorieslist","$addProduct","$getProduct","$updateProduct","formRef","loadData","id","dataSource","formState","name","price","categories","categoriesList","emit","__emit","value","nval","then","r","product","console","log","length","category","categories_id","afterOpenChange","val","onClear","closeDrawer","onFinish","newProduct","create","response","success","catch","error","loadCate","map","item","resetFields"],"sources":["E:/permisson/demo/src/components/product/addProduct.vue"],"sourcesContent":["<template>\r\n  <a-drawer :open=\"showDrawer\" class=\"custom-class\" root-class-name=\"root-class-name\" :root-style=\"{ color: 'blue' }\"\r\n    style=\"color: red\" title=\"产品添加\" placement=\"right\" @after-open-change=\"afterOpenChange\" @close=\"closeDrawer\">\r\n    <a-form :model=\"formState\" v-bind=\"layout\" :validate-messages=\"validateMessages\" :wrapperCol=\"{ span: 16 }\"\r\n      :label-col=\"{ span: 6 }\" ref=\"formRef\" @finish=\"onFinish\">\r\n      <a-form-item name=\"name\" label=\"产品名称\" :rules=\"[{ required: true, message: '请输入产品名称！' }]\">\r\n        <a-input v-model:value=\"formState.name\" />\r\n      </a-form-item>\r\n      <a-form-item name=\"price\" label=\"价格\" :rules=\"[{ required: true, message: '请输入价格！' }]\">\r\n        <a-input v-model:value=\"formState.price\" />\r\n      </a-form-item>\r\n      <a-form-item name=\"categories\" label=\"类别\">\r\n        <a-radio-group v-model:value=\"formState.categories.id\" name=\"radioGroup\">\r\n          <a-radio v-for=\"(item, index) in categoriesList\" :key=\"index\" :value=\"item.id\">{{ item.name }}</a-radio>\r\n        </a-radio-group>\r\n      </a-form-item>\r\n      <a-form-item :wrapperCol=\"{ offset: 8, span: 16 }\">\r\n        <a-button class=\"add\" html-type=\"submit\">添加</a-button>\r\n        <a-button class=\"clear\" html-type=\"reset\" @click=\"onClear\">清空</a-button>\r\n      </a-form-item>\r\n    </a-form>\r\n  </a-drawer>\r\n</template>\r\n\r\n<script setup>\r\nimport { reactive, ref, toRefs, inject, watch } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport { $categorieslist, $addProduct, $getProduct,$updateProduct } from '../../api/proinfo.js'\r\n\r\nconst formRef = ref();\r\nlet loadData = inject('loadData')\r\nlet id = inject('id')\r\nlet dataSource = reactive({\r\n  formState: {\r\n    id:'',\r\n    name: '',\r\n    price: '',\r\n    categories: {\r\n       \r\n        // 关联类别的 ID // 如果有多个类别\r\n      \r\n    }  // 用于存储选中的类别ID\r\n  },\r\n  categoriesList: []  // 用于存储类别列表\r\n})\r\n\r\nlet { showDrawer, no } = defineProps([\"showDrawer\", \"no\"]);\r\nlet { formState, categoriesList } = toRefs(dataSource);\r\nlet emit = defineEmits(['sync-drawer'])\r\n\r\nwatch(() => id.value, (nval) => {\r\n  $getProduct(nval).then(r => {\r\n    // 更新formState的值\r\n    const product = r[0];  // 假设返回的是一个产品数组\r\n    dataSource.formState.name = product.name;\r\n    dataSource.formState.price = product.price;\r\n    dataSource.formState.id = product.id;\r\n    console.log(r);\r\n    // 选择类别的 ID 和 name\r\n    if (product.categories && product.categories.length > 0) {\r\n      const category = product.categories[0]?.categories_id; // 获取第一个类别\r\n      dataSource.formState.categories = { id: category?.id || '', name: category?.name || '' };\r\n    } else {\r\n      dataSource.formState.categories = { id: '', name: '' };  // 如果没有类别，默认空值\r\n    }\r\n  });\r\n  \r\n});\r\n\r\n\r\nlet afterOpenChange = (val) => {\r\n  if (!val) {\r\n    emit('sync-drawer', val)\r\n    onClear()\r\n  }\r\n}\r\n\r\nconst closeDrawer = () => {\r\n  emit('sync-drawer', false);\r\n  onClear()\r\n};\r\n\r\nlet onFinish = async() => {\r\n  if(id.value){\r\n  \r\n  await $updateProduct(dataSource.formState)\r\n  loadData()\r\n  }\r\n else{\r\n  const newProduct = {\r\n    name: dataSource.formState.name,\r\n    price: dataSource.formState.price,\r\n    categories: {\r\n      create: [\r\n        { categories_id: dataSource.formState.categories },  // 关联类别的 ID\r\n      ]\r\n    }\r\n  };\r\n await $addProduct(newProduct)\r\n    .then(response => {\r\n      message.success(\"产品添加成功1\");\r\n      onClear()\r\n      console.log(response);\r\n      loadData()\r\n    })\r\n    .catch(error => {\r\n      message.error(\"产品添加失败1\");\r\n        });\r\n }\r\n}\r\n\r\nlet loadCate = () => {\r\n  $categorieslist().then(r => {\r\n    dataSource.categoriesList = r.map(item => ({ id: item.id, name: item.name }));\r\n    console.log(dataSource.categoriesList);  // 检查类别列表\r\n  })\r\n}\r\n\r\nlet onClear = () => {\r\n  formRef.value.resetFields();\r\n}\r\n\r\nloadCate();\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}