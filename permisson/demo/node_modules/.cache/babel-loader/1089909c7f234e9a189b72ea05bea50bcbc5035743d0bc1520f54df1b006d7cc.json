{"ast":null,"code":"import \"core-js/modules/es.array.with.js\";\nimport AddProduct from '../../components/product/addProduct';\nimport { reactive, toRefs, ref } from 'vue';\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nexport default {\n  __name: 'productsinfo',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const searchKeyword = ref('');\n    // 数据源\n    let dataSource = reactive({\n      tableDatas: [],\n      // 确保 dataSource.tableDatas 一开始是空数组\n      tableColumns: [{\n        title: '产品id',\n        dataIndex: 'id',\n        key: 'id'\n      }, {\n        title: '产品名称',\n        dataIndex: 'name',\n        key: 'name'\n      }, {\n        title: '价格',\n        dataIndex: 'price',\n        key: 'price'\n      }, {\n        title: '类别',\n        dataIndex: 'sort',\n        key: 'sort'\n      }],\n      showDrawer: true\n    });\n    // 使用 `toRefs` 解构 `reactive` 数据，方便在模板中直接使用\n    let {\n      tableDatas,\n      tableColumns,\n      showDrawer\n    } = toRefs(dataSource);\n    const client = createDirectus('http://localhost:8055').with(rest());\n    let afterOpenChange = () => {\n      console.log(123);\n    };\n    let loadData = async (searchKeyword = '') => {\n      try {\n        const filter = searchKeyword ? {\n          filter: {\n            name: {\n              _contains: searchKeyword // 直接查询包含关键字的产品\n            }\n          }\n        } : {};\n        const result = await client.request(readItems('products', {\n          fields: ['*'],\n          ...filter // 传入过滤条件\n        }));\n\n        // 将返回的数据赋值给 tableDatas\n        tableDatas.value = result;\n      } catch (error) {\n        console.error('Failed to fetch items:', error);\n      }\n    };\n    loadData();\n    let onSearch = value => {\n      searchKeyword.value = value;\n      loadData(value); // 传递搜索内容\n    };\n    const __returned__ = {\n      searchKeyword,\n      get dataSource() {\n        return dataSource;\n      },\n      set dataSource(v) {\n        dataSource = v;\n      },\n      get tableDatas() {\n        return tableDatas;\n      },\n      set tableDatas(v) {\n        tableDatas = v;\n      },\n      get tableColumns() {\n        return tableColumns;\n      },\n      set tableColumns(v) {\n        tableColumns = v;\n      },\n      get showDrawer() {\n        return showDrawer;\n      },\n      set showDrawer(v) {\n        showDrawer = v;\n      },\n      client,\n      get afterOpenChange() {\n        return afterOpenChange;\n      },\n      set afterOpenChange(v) {\n        afterOpenChange = v;\n      },\n      get loadData() {\n        return loadData;\n      },\n      set loadData(v) {\n        loadData = v;\n      },\n      get onSearch() {\n        return onSearch;\n      },\n      set onSearch(v) {\n        onSearch = v;\n      },\n      get AddProduct() {\n        return AddProduct;\n      },\n      reactive,\n      toRefs,\n      ref,\n      get createDirectus() {\n        return createDirectus;\n      },\n      get rest() {\n        return rest;\n      },\n      get readItems() {\n        return readItems;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["AddProduct","reactive","toRefs","ref","createDirectus","rest","readItems","searchKeyword","dataSource","tableDatas","tableColumns","title","dataIndex","key","showDrawer","client","with","afterOpenChange","console","log","loadData","filter","name","_contains","result","request","fields","value","error","onSearch"],"sources":["E:/permisson/demo/src/views/products/productsinfo.vue"],"sourcesContent":["<template>\r\n  <div class=\"search\">\r\n    <a-input-search\r\n    class=\"searchText\"\r\n      v-model:value=\"searchKeyword\"\r\n      placeholder=\"请输入产品名称\"\r\n      enter-button=\"查询\"\r\n      size=\"default\"\r\n      @search=\"onSearch\"\r\n    />\r\n    <a-button type=\"primary\" class=\"add\" @click=\"showDrawer=true\">添加</a-button>\r\n  </div>\r\n  <a-table :dataSource=\"tableDatas\" :columns=\"tableColumns\" />\r\n  <a-drawer\r\n    v-model:open=\"open\"\r\n    class=\"custom-class\"\r\n    root-class-name=\"root-class-name\"\r\n    :root-style=\"{ color: 'blue' }\"\r\n    style=\"color: red\"\r\n    title=\"Basic Drawer\"\r\n    placement=\"right\"\r\n    @after-open-change=\"afterOpenChange\"\r\n  >\r\n    <p>Some contents...</p>\r\n    <p>Some contents...</p>\r\n    <p>Some contents...</p>\r\n  </a-drawer>\r\n</template>\r\n\r\n<script setup>\r\nimport AddProduct from '../../components/product/addProduct';\r\nimport { reactive, toRefs, ref } from 'vue';\r\nimport { createDirectus, rest, readItems } from '@directus/sdk';\r\nconst searchKeyword = ref('');\r\n// 数据源\r\nlet dataSource = reactive({\r\n  tableDatas: [],  // 确保 dataSource.tableDatas 一开始是空数组\r\n  tableColumns: [\r\n      {\r\n          title: '产品id',\r\n          dataIndex: 'id',\r\n          key: 'id',\r\n      },\r\n      {\r\n          title: '产品名称',\r\n          dataIndex: 'name',\r\n          key: 'name',\r\n      },\r\n      {\r\n          title: '价格',\r\n          dataIndex: 'price',\r\n          key: 'price',\r\n      },\r\n      {\r\n          title: '类别',\r\n          dataIndex: 'sort',\r\n          key: 'sort',\r\n      }\r\n  ],\r\n  showDrawer:true\r\n});\r\n// 使用 `toRefs` 解构 `reactive` 数据，方便在模板中直接使用\r\nlet { tableDatas, tableColumns,showDrawer } = toRefs(dataSource);\r\nconst client = createDirectus('http://localhost:8055').with(rest());\r\nlet afterOpenChange=()=>{\r\n  console.log(123)\r\n}\r\nlet loadData=async(searchKeyword='')=>{\r\ntry {\r\n  const filter = searchKeyword\r\n      ? {\r\n          filter: {\r\n            name: {\r\n              _contains: searchKeyword, // 直接查询包含关键字的产品\r\n            },\r\n          },\r\n        }\r\n      : {};\r\n\r\n    const result = await client.request(readItems('products', {\r\n      fields: ['*'],\r\n      ...filter, // 传入过滤条件\r\n    }));\r\n\r\n  // 将返回的数据赋值给 tableDatas\r\n  tableDatas.value = result\r\n} catch (error) {\r\n  console.error('Failed to fetch items:', error);\r\n}\r\n};\r\nloadData()\r\nlet onSearch=(value)=>{\r\n  searchKeyword.value = value;\r\n  loadData(value);  // 传递搜索内容\r\n}\r\n</script>\r\n<style scoped lang=\"scss\">\r\n.search{\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  .searchText{\r\n    width: 300px;\r\n  }\r\n  .add{\r\n    background: red;\r\n    border: none;\r\n  }\r\n}\r\n</style>"],"mappings":";AA8BA,OAAOA,UAAU,MAAM,qCAAqC;AAC5D,SAASC,QAAQ,EAAEC,MAAM,EAAEC,GAAG,QAAQ,KAAK;AAC3C,SAASC,cAAc,EAAEC,IAAI,EAAEC,SAAS,QAAQ,eAAe;;;;;;;IAC/D,MAAMC,aAAa,GAAGJ,GAAG,CAAC,EAAE,CAAC;IAC7B;IACA,IAAIK,UAAU,GAAGP,QAAQ,CAAC;MACxBQ,UAAU,EAAE,EAAE;MAAG;MACjBC,YAAY,EAAE,CACV;QACIC,KAAK,EAAE,MAAM;QACbC,SAAS,EAAE,IAAI;QACfC,GAAG,EAAE;MACT,CAAC,EACD;QACIF,KAAK,EAAE,MAAM;QACbC,SAAS,EAAE,MAAM;QACjBC,GAAG,EAAE;MACT,CAAC,EACD;QACIF,KAAK,EAAE,IAAI;QACXC,SAAS,EAAE,OAAO;QAClBC,GAAG,EAAE;MACT,CAAC,EACD;QACIF,KAAK,EAAE,IAAI;QACXC,SAAS,EAAE,MAAM;QACjBC,GAAG,EAAE;MACT,CAAC,CACJ;MACDC,UAAU,EAAC;IACb,CAAC,CAAC;IACF;IACA,IAAI;MAAEL,UAAU;MAAEC,YAAY;MAACI;IAAW,CAAC,GAAGZ,MAAM,CAACM,UAAU,CAAC;IAChE,MAAMO,MAAM,GAAGX,cAAc,CAAC,uBAAuB,CAAC,CAACY,IAAI,CAACX,IAAI,CAAC,CAAC,CAAC;IACnE,IAAIY,eAAe,GAACA,CAAA,KAAI;MACtBC,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;IAClB,CAAC;IACD,IAAIC,QAAQ,GAAC,MAAAA,CAAMb,aAAa,GAAC,EAAE,KAAG;MACtC,IAAI;QACF,MAAMc,MAAM,GAAGd,aAAa,GACtB;UACEc,MAAM,EAAE;YACNC,IAAI,EAAE;cACJC,SAAS,EAAEhB,aAAa,CAAE;YAC5B;UACF;QACF,CAAC,GACD,CAAC,CAAC;QAEN,MAAMiB,MAAM,GAAG,MAAMT,MAAM,CAACU,OAAO,CAACnB,SAAS,CAAC,UAAU,EAAE;UACxDoB,MAAM,EAAE,CAAC,GAAG,CAAC;UACb,GAAGL,MAAM,CAAE;QACb,CAAC,CAAC,CAAC;;QAEL;QACAZ,UAAU,CAACkB,KAAK,GAAGH,MAAM;MAC3B,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACA,CAAC;IACDR,QAAQ,CAAC,CAAC;IACV,IAAIS,QAAQ,GAAEF,KAAK,IAAG;MACpBpB,aAAa,CAACoB,KAAK,GAAGA,KAAK;MAC3BP,QAAQ,CAACO,KAAK,CAAC,CAAC,CAAE;IACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}